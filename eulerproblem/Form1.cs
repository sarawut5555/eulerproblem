using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace eulerproblem
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        private void Form1_Load(object sender, EventArgs e)
        {

        }
        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }
        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 1")
            {
                string problem1 = "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23." +
                    "\r\n Find the sum of all the multiples of 3 or 5 below 1000.";

                txt_problem.Text = problem1;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 2")
            {
                string problem2 = "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: " +
                    "\r\n\t\t 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... " +
                    "\r\n" +
                    "\r\n By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.";

                txt_problem.Text = problem2;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 3")
            {
                string problem3 = "The prime factors of 13195 are 5, 7, 13 and 29. " +
                    "\r\n What is the largest prime factor of the number 600851475143?";

                txt_problem.Text = problem3;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 4")
            {
                string problem4 = "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9099 = 91 x 99." +
                    "\r\n Find the largest palindrome made from the product of two 3-digit numbers.";

                txt_problem.Text = problem4;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 5")
            {
                string problem5 = "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder." +
                    "\r\n What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?";

                txt_problem.Text = problem5;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 6")
            {
                string problem6 = "The sum of the squares of the first ten natural numbers is " +
                    "\r\n\t\t 1² + 2² + … + 10² = 385. " +
                    "\r\n" +
                    "\r\n The square of the sum of the first ten natural numbers is " +
                    "\r\n\t\t (1 + 2 + … + 10)² = 55² = 3025. " +
                    "\r\n" +
                    "\r\n Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640." +
                    "\r\n Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.";

                txt_problem.Text = problem6;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 7")
            {
                string problem7 = "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. " +
                    "\r\n What is the 10,001st prime number?";

                txt_problem.Text = problem7;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 8")
            {
                string problem8 = "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832." +
                    "\r\n\t 73167176531330624919225119674426574742355349194934 \t 96983520312774506326239578318016984801869478851843" +
                    "\r\n\t 85861560789112949495459501737958331952853208805511 \t 12540698747158523863050715693290963295227443043557" +
                    "\r\n\t 66896648950445244523161731856403098711121722383113 \t 62229893423380308135336276614282806444486645238749" +
                    "\r\n\t 30358907296290491560440772390713810515859307960866 \t 70172427121883998797908792274921901699720888093776" +
                    "\r\n\t 65727333001053367881220235421809751254540594752243 \t 52584907711670556013604839586446706324415722155397" +
                    "\r\n\t 53697817977846174064955149290862569321978468622482 \t 83972241375657056057490261407972968652414535100474" +
                    "\r\n\t 82166370484403199890008895243450658541227588666881 \t 16427171479924442928230863465674813919123162824586" +
                    "\r\n\t 17866458359124566529476545682848912883142607690042 \t 24219022671055626321111109370544217506941658960408" +
                    "\r\n\t 07198403850962455444362981230987879927244284909188 \t 84580156166097919133875499200524063689912560717606" +
                    "\r\n\t 05886116467109405077541002256983155200055935729725 \t 71636269561882670428252483600823257530420752963450" +
                    "\r\n" +
                    "\r\n Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?";

                txt_problem.Text = problem8;

            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 9")
            {
                string problem9 = "A Pythagorean triplet is a set of three natural numbers, a < b < c, for which," +
                    "\r\n\t\t a² + b² = c²" +
                    "\r\n" +
                    "\r\n For example, 3² + 4² = 9 + 16 = 25 = 52." +
                    "\r\n" +
                    "\r\n There exists exactly one Pythagorean triplet for which a + b + c = 1000." +
                    "\r\n Find the product abc.";

                txt_problem.Text = problem9;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 10")
            {
                string problem10 = "The sum fo the primes below 10 is  2 + 3 + 5 + 7 = 17. " +
                    "\r\n Find the sum of all the primes below two million.";

                txt_problem.Text = problem10;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 11")
            {
                string problem11 = "In the 20 x 20 grid below, four numbers along a diagonal" +
                    "\r\n\t\t 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08" +
                    "\r\n\t\t 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00" +
                    "\r\n\t\t 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65" +
                    "\r\n\t\t 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91" +
                    "\r\n\t\t 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80" +
                    "\r\n\t\t 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50" +
                    "\r\n\t\t 32 98 81 28 64 23 67 10 |26| 38 40 67 59 54 70 66 18 38 64 70" +
                    "\r\n\t\t 67 26 20 68 02 62 12 20 95 |63| 94 39 63 08 40 91 66 49 94 21" +
                    "\r\n\t\t 24 55 58 05 66 73 99 26 97 17 |78| 78 96 83 14 88 34 89 63 72" +
                    "\r\n\t\t 21 36 23 09 75 00 76 44 20 45 35 |14| 00 61 33 97 34 31 33 95" +
                    "\r\n\t\t 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92" +
                    "\r\n\t\t 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57" +
                    "\r\n\t\t 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58" +
                    "\r\n\t\t 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40" +
                    "\r\n\t\t 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66" +
                    "\r\n\t\t 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69" +
                    "\r\n\t\t 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36" +
                    "\r\n\t\t 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16" +
                    "\r\n\t\t 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54" +
                    "\r\n\t\t 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48" +
                    "\r\n" +
                    "\r\n The product of these numbers is 26 x 63 x 78 x 14 = 1788696." +
                    "\r\n What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20 x 20 grid?" +
                    "\r\n";

                txt_problem.Text = problem11;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 12")
            {
                string problem12 = "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be" +
                    "\r\n\t 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28" +
                    "\r\n" +
                    "\r\n The first ten terms would be:" +
                    "\r\n\t 1,3,6,10,15,21,28,36,45,55,…" +
                    "\r\n" +
                    "\r\nLet us list the factors of the first seven triangle numbers:" +
                    "\r\n\t\t\t 1:1" +
                    "\r\n\t\t\t 3:1,3" +
                    "\r\n\t\t\t 6:1,2,3,6" +
                    "\r\n\t\t\t 10:1,2,5,10" +
                    "\r\n\t\t\t 15:1,3,5,15" +
                    "\r\n\t\t\t 21:1,3,7,21" +
                    "\r\n\t\t\t 28:1,2,4,14,28" +
                    "\r\n" +
                    "\r\nWe can see that 28 is the first triangle number to have over five divisors." +
                    "\r\nWhat is the value of the first triangle number to have over five hundred divisors?";

                txt_problem.Text = problem12;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 13")
            {
                string problem13 = "Work out the first ten digits of the sum of the following one-hundred 50-digit numbers." +
                    "\r\n\t 37107287533902102798797998220837590246510135740250 \t 46376937677490009712648124896970078050417018260538" +
                    "\r\n\t 74324986199524741059474233309513058123726617309629 \t 91942213363574161572522430563301811072406154908250" +
                    "\r\n\t 23067588207539346171171980310421047513778063246676 \t 89261670696623633820136378418383684178734361726757" +
                    "\r\n\t 28112879812849979408065481931592621691275889832738 \t 44274228917432520321923589422876796487670272189318" +
                    "\r\n\t 47451445736001306439091167216856844588711603153276 \t 70386486105843025439939619828917593665686757934951" +
                    "\r\n\t 62176457141856560629502157223196586755079324193331 \t 64906352462741904929101432445813822663347944758178" +
                    "\r\n\t 92575867718337217661963751590579239728245598838407 \t 58203565325359399008402633568948830189458628227828" +
                    "\r\n\t 80181199384826282014278194139940567587151170094390 \t 35398664372827112653829987240784473053190104293586" +
                    "\r\n\t 86515506006295864861532075273371959191420517255829 \t 71693888707715466499115593487603532921714970056938" +
                    "\r\n\t 54370070576826684624621495650076471787294438377604 \t 53282654108756828443191190634694037855217779295145" +
                    "\r\n\t 36123272525000296071075082563815656710885258350721 \t 45876576172410976447339110607218265236877223636045" +
                    "\r\n\t 17423706905851860660448207621209813287860733969412 \t 81142660418086830619328460811191061556940512689692" +
                    "\r\n\t 51934325451728388641918047049293215058642563049483 \t 62467221648435076201727918039944693004732956340691" +
                    "\r\n\t 15732444386908125794514089057706229429197107928209 \t 55037687525678773091862540744969844508330393682126" +
                    "\r\n\t 18336384825330154686196124348767681297534375946515 \t 80386287592878490201521685554828717201219257766954" +
                    "\r\n\t 78182833757993103614740356856449095527097864797581 \t 16726320100436897842553539920931837441497806860984" +
                    "\r\n\t 48403098129077791799088218795327364475675590848030 \t 87086987551392711854517078544161852424320693150332" +
                    "\r\n\t 59959406895756536782107074926966537676326235447210 \t 69793950679652694742597709739166693763042633987085" +
                    "\r\n\t 41052684708299085211399427365734116182760315001271 \t 65378607361501080857009149939512557028198746004375" +
                    "\r\n\t 35829035317434717326932123578154982629742552737307 \t 94953759765105305946966067683156574377167401875275" +
                    "\r\n\t 88902802571733229619176668713819931811048770190271 \t 25267680276078003013678680992525463401061632866526" +
                    "\r\n\t 36270218540497705585629946580636237993140746255962 \t 24074486908231174977792365466257246923322810917141" +
                    "\r\n\t 91430288197103288597806669760892938638285025333403 \t 34413065578016127815921815005561868836468420090470" +
                    "\r\n\t 23053081172816430487623791969842487255036638784583 \t 11487696932154902810424020138335124462181441773470" +
                    "\r\n\t 63783299490636259666498587618221225225512486764533 \t 67720186971698544312419572409913959008952310058822" +
                    "\r\n\t 95548255300263520781532296796249481641953868218774 \t 76085327132285723110424803456124867697064507995236" +
                    "\r\n\t 37774242535411291684276865538926205024910326572967 \t 23701913275725675285653248258265463092207058596522" +
                    "\r\n\t 29798860272258331913126375147341994889534765745501 \t 18495701454879288984856827726077713721403798879715" +
                    "\r\n\t 38298203783031473527721580348144513491373226651381 \t 34829543829199918180278916522431027392251122869539" +
                    "\r\n\t 40957953066405232632538044100059654939159879593635 \t 29746152185502371307642255121183693803580388584903" +
                    "\r\n\t 41698116222072977186158236678424689157993532961922 \t 62467957194401269043877107275048102390895523597457" +
                    "\r\n\t 23189706772547915061505504953922979530901129967519 \t 86188088225875314529584099251203829009407770775672" +
                    "\r\n\t 11306739708304724483816533873502340845647058077308 \t 82959174767140363198008187129011875491310547126581" +
                    "\r\n\t 97623331044818386269515456334926366572897563400500 \t 42846280183517070527831839425882145521227251250327" +
                    "\r\n\t 55121603546981200581762165212827652751691296897789 \t 32238195734329339946437501907836945765883352399886" +
                    "\r\n\t 75506164965184775180738168837861091527357929701337 \t 62177842752192623401942399639168044983993173312731" +
                    "\r\n\t 32924185707147349566916674687634660915035914677504 \t 99518671430235219628894890102423325116913619626622" +
                    "\r\n\t 73267460800591547471830798392868535206946944540724 \t 76841822524674417161514036427982273348055556214818" +
                    "\r\n\t 97142617910342598647204516893989422179826088076852 \t 87783646182799346313767754307809363333018982642090" +
                    "\r\n\t 10848802521674670883215120185883543223812876952786 \t 71329612474782464538636993009049310363619763878039" +
                    "\r\n\t 62184073572399794223406235393808339651327408011116 \t 66627891981488087797941876876144230030984490851411" +
                    "\r\n\t 60661826293682836764744779239180335110989069790714 \t 85786944089552990653640447425576083659976645795096" +
                    "\r\n\t 66024396409905389607120198219976047599490197230297 \t 64913982680032973156037120041377903785566085089252" +
                    "\r\n\t 16730939319872750275468906903707539413042652315011 \t 94809377245048795150954100921645863754710598436791" +
                    "\r\n\t 78639167021187492431995700641917969777599028300699 \t 15368713711936614952811305876380278410754449733078" +
                    "\r\n\t 40789923115535562561142322423255033685442488917353 \t 44889911501440648020369068063960672322193204149535" +
                    "\r\n\t 41503128880339536053299340368006977710650566631954 \t 81234880673210146739058568557934581403627822703280" +
                    "\r\n\t 82616570773948327592232845941706525094512325230608 \t 22918802058777319719839450180888072429661980811197" +
                    "\r\n\t 77158542502016545090413245809786882778948721859617 \t 72107838435069186155435662884062257473692284509516" +
                    "\r\n\t 20849603980134001723930671666823555245252804609722 \t 53503534226472524250874054075591789781264330331690" +
                    "\r\n";

                txt_problem.Text = problem13;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 14")
            {
                string problem14 = "The following iterative sequence is defined for the set of positive integers:" +
                    "\r\n\t\t\t n → n/2 (n is even)" +
                    "\r\n\t\t\t n → 3n+1 (n is odd)" +
                    "\r\n" +
                    "\r\n Using the rule above and starting with 13, we generate the following sequence:" +
                    "\r\n" +
                    "\r\n\t 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1" +
                    "\r\n" +
                    "\r\n It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1." +
                    "\r\n" +
                    "\r\n Which starting number, under one million, produces the longest chain?" +
                    "\r\n" +
                    "\r\n NOTE: Once the chain starts the terms are allowed to go above one million.";

                txt_problem.Text = problem14;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 16")
            {
                string problem16 = "2^15 = 32768, and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26." +
                    "\r\n What is the sum of the digits of the number 2 ^ 1000 ? ";

                txt_problem.Text = problem16;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 17")
            {
                string problem17 = "If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3+3+5+4+4=19 letters used in total." +
                    "\r\n" +
                    "\r\n If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?" +
                    "\r\n" +
                    "\r\n Note: do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of “and” when writing out numbers is in compliance with British usage.";

                txt_problem.Text = problem17;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 18")
            {
                string problem18 = "By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23." +
                    "\r\n" +
                    "\r\n\t\t\t\t\t                                   3" +
                    "\r\n\t\t\t\t\t                                  7 4" +
                    "\r\n\t\t\t\t\t                                 2 4 6" +
                    "\r\n\t\t\t\t\t                                8 5 9 3" +
                    "\r\n That is 3 + 7 + 4 + 9 = 23." +
                    "\r\n Find the maximum total from top to bottom of the triangle below:" +
                    "\r\n" +
                    "\r\n\t\t\t\t\t                                  75" +
                    "\r\n\t\t\t\t\t                                95 64" +
                    "\r\n\t\t\t\t\t                              17 47 82" +
                    "\r\n\t\t\t\t\t                            18 35 87 10" +
                    "\r\n\t\t\t\t\t                          20 04 82 47 65" +
                    "\r\n\t\t\t\t\t                        19 01 23 75 03 34" +
                    "\r\n\t\t\t\t\t                       88 02 77 73 07 63 67" +
                    "\r\n\t\t\t\t\t                     99 65 04 28 06 16 70 92" +
                    "\r\n\t\t\t\t\t                   41 41 26 56 83 40 80 70 33" +
                    "\r\n\t\t\t\t\t                 41 48 72 33 47 32 37 16 94 29" +
                    "\r\n\t\t\t\t\t               53 71 44 65 25 43 91 52 97 51 14" +
                    "\r\n\t\t\t\t\t             70 11 33 28 77 73 17 78 39 68 17 57" +
                    "\r\n\t\t\t\t\t            91 71 52 38 17 14 91 43 58 50 27 29 48" +
                    "\r\n\t\t\t\t\t          63 66 04 68 89 53 67 30 73 16 69 87 40 31" +
                    "\r\n\t\t\t\t\t         04 62 98 27 23 09 70 98 73 93 38 53 60 04 23" +
                    "\r\n" +
                    "\r\n Note: as there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)" +
                    "\r\n";

                txt_problem.Text = problem18;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 19")
            {
                string problem19 = "You are given the following information, but you may prefer to do some research for yourself." +
                    "\r\n" +
                    "\r\n\t 1 Jan 1900 was a Monday." +
                    "\r\n" +
                    "\r\n\t Thirty days has September," +
                    "\r\n\t April, June and November." +
                    "\r\n\t All the rest have thirty-one," +
                    "\r\n\t Saving February alone," +
                    "\r\n\t Which has twenty-eight, rain or shine." +
                    "\r\n\t And on leap years, twenty-nine." +
                    "\r\n\t A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400." +
                    "\r\n" +
                    "\r\n How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?";

                txt_problem.Text = problem19;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 20")
            {
                string problem20 = "n! means n x (n − 1) x ... × 3 × 2 × 1" +
                    "\r\n" +
                    "\r\n For example, 10! = 10 × 9 x ... × 3 × 2 × 1 = 3628800 ," +
                    "\r\n and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27." +
                    "\r\n" +
                    "\r\n Find the sum of the digits in the number 100!";

                txt_problem.Text = problem20;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 21")
            {
                string problem21 = "Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n)." +
                    "\r\n If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers." +
                    "\r\n" +
                    "\r\n For example, the proper divisors of 220 are 1,2,4,5,10,11,20,22,44,55 and 110; therefore d(220) = 284." +
                    "\r\n The proper divisors of 284 are 1,2,4,71 and 142; so d(284) = 220." +
                    "\r\n" +
                    "\r\n Evaluate the sum of all the amicable numbers under 10000.";

                txt_problem.Text = problem21;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 22")
            {
                string problem22 = "Using names.txt (right click and ‘Save Link/Target As…’), a 46KB text file containing over five-thousand first names, begin by sorting it into alphabetical order. " +
                    "Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score." +
                    "\r\n" +
                    "\r\n For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53 , is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714." +
                    "\r\n" +
                    "\r\n What is the total of all the name scores in the file?";

                txt_problem.Text = problem22;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 23")
            {
                string problem23 = "A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 =28 , which means that 28 is a perfect number." +
                    "\r\n" +
                    "\r\n A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n." +
                    "\r\n" +
                    "\r\n As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16 , the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123" +
                    "can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit." +
                    "\r\n" +
                    "\r\n Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.";

                txt_problem.Text = problem23;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 24")
            {
                string problem24 = "A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1,2,3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are: " +
                    "\r\n" +
                    "\r\n\t\t\t 012 021 102 120 201 210" +
                    "\r\n" +
                    "\r\n What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?";

                txt_problem.Text = problem24;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 25")
            {
                string problem25 = "The Fibonacci sequence is defined by the recurrence relation:" +
                    "\r\n\t\t\t Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1." +
                    "\r\n" +
                    "\r\n Hence the first 12 terms will be:" +
                    "\r\n\t\t\t\t F1 = 1" +
                    "\r\n\t\t\t\t F2 = 1" +
                    "\r\n\t\t\t\t F3 = 2" +
                    "\r\n\t\t\t\t F4 = 3" +
                    "\r\n\t\t\t\t F5 = 5" +
                    "\r\n\t\t\t\t F6 = 8" +
                    "\r\n\t\t\t\t F7 = 13" +
                    "\r\n\t\t\t\t F8 = 21" +
                    "\r\n\t\t\t\t F9 = 34" +
                    "\r\n\t\t\t\t F10 = 55" +
                    "\r\n\t\t\t\t F11 = 89" +
                    "\r\n\t\t\t\t F12 = 144" +
                    "\r\n" +
                    "\r\n The 12th term, F12, is the first term to contain three digits." +
                    "\r\n What is the index of the first term in the Fibonacci sequence to contain 1000 digits?";

                txt_problem.Text = problem25;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 26")
            {
                string problem26 = "A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:" +
                    "\r\n" +
                    "\r\n\t\t\t\t 1/2 = 0.5" +
                    "\r\n\t\t\t\t 1/3 = 0.(3)" +
                    "\r\n\t\t\t\t 1/4 = 0.25" +
                    "\r\n\t\t\t\t 1/5 = 0.2" +
                    "\r\n\t\t\t\t 1/6 = 0.1(6)" +
                    "\r\n\t\t\t\t 1/7 = 0.(142857)" +
                    "\r\n\t\t\t\t 1/8 = 0.125" +
                    "\r\n\t\t\t\t 1/9 = 0.(1)" +
                    "\r\n\t\t\t\t  1/10 = 0.1" +
                    "\r\n" +
                    "\r\n Where 0.1(6) means 0.166666…, and has a 1-digit recurring cycle. It can be seen that  1/7 has a 6-digit recurring cycle." +
                    "\r\n Find the value of d < 1000 for which  1/d contains the longest recurring cycle in its decimal fraction part.";

                txt_problem.Text = problem26;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 27")
            {
                string problem27 = "Euler discovered the remarkable quadratic formula:" +
                    "\r\n\t\t\t\t\t n² + n + 41" +
                    "\r\n" +
                    "\r\n It turns out that the formula will produce 40 primes for the consecutive integer values 0 ≤ n ≤ 39. " +
                    "However, when n = 40, 40² + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41." +
                    "\r\n" +
                    "\r\n The incredible formula n² − 79 × n + 1601 was discovered, which produces 80 primes for the consecutive values 0 ≤ n ≤ 79. " +
                    "The product of the coefficients, −79 and 1601, is −126479." +
                    "\r\n" +
                    "\r\n Considering quadratics of the form:" +
                    "\r\n\t\t\t n² + an + b, where |a| < 1000 and |b| ≤ 1000" +
                    "\r\n" +
                    "\r\n\t\t\t where |n| is the modulus/absolute value of n" +
                    "\r\n\t\t\t e.g. |11| = 11 and |−4| = 4" +
                    "\r\n" +
                    "\r\n Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.";

                txt_problem.Text = problem27;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 28")
            {
                string problem28 = "Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:" +
                    "\r\n" +
                    "\r\n\t\t\t\t\t 21 22 23 24 25 " +
                    "\r\n\t\t\t\t\t 20  7  8  9 10 " +
                    "\r\n\t\t\t\t\t 19  6  1  2 11 " +
                    "\r\n\t\t\t\t\t 18  5  4  3 12 " +
                    "\r\n\t\t\t\t\t 17 16 15 14 13 " +
                    "\r\n" +
                    "\r\n It can be verified that the sum of the numbers on the diagonals is 101." +
                    "\r\n What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?";
                    
                txt_problem.Text = problem28;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 29")
            {
                string problem29 = "Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:" +
                    "\r\n" +
                    "\r\n\t\t\t\t 2^2 = 4,  2^3 = 8,   2^4 = 16,  2^5 = 32" +
                    "\r\n\t\t\t\t 3^2 = 9,  3^3 = 27,  3^4 = 81,  3^5 = 243" +
                    "\r\n\t\t\t\t 4^2 = 16, 4^3 = 64,  4^4 = 256, 4^5 = 1024" +
                    "\r\n\t\t\t\t 5^2 = 25, 5^3 = 125, 5^4 = 625, 5^5 = 3125" +
                    "\r\n" +
                    "\r\n If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:" +
                    "\r\n\t\t\t 4,8,9,16,25,27,32,64,81,125,243,256,625,1024,3125" +
                    "\r\n" +
                    "\r\n How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?";

                txt_problem.Text = problem29;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 30")
            {
                string problem30 = "Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:" +
                    "\r\n" +
                    "\r\n\t\t\t 1634= 1^4 + 6^4 + 3^4 + 4^4" +
                    "\r\n\t\t\t 8208= 8^4 + 2^4 + 0^4 + 8^4" +
                    "\r\n\t\t\t 9474= 9^4 + 4^4 + 7^4 + 4^4" +
                    "\r\n" +
                    "\r\n As 1=14 is not a sum it is not included." +
                    "\r\n" +
                    "\r\n The sum of these numbers is 1634 + 8208 + 9474 = 19316." +
                    "\r\n" +
                    "\r\n Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.";

                txt_problem.Text = problem30;
            }
            else if (list_problem.SelectedItem != null && list_problem.SelectedItem.ToString() == "Problem 31")
            {
                string problem31 = "In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:" +
                    "\r\n\t\t 1p,2p,5p,10p,20p,50p, £1 (100p) and £2 (200p)." +
                    "\r\n" +
                    "\r\n It is possible to make £2 in the following way:" +
                    "\r\n\t\t 1 × £1 + 1 × 50p + 2 × 20p + 1 × 5p + 1 × 2p + 3 × 1p" +
                    "\r\n" +
                    "\r\n How many different ways can £2 be made using any number of coins?";

                txt_problem.Text = problem31;
            }
            else
            {
                txt_problem.Text = string.Empty;
                txt_solution.Text = string.Empty;
                txt_status.Text = string.Empty;
            }
        }
        private void button1_Click(object sender, EventArgs e)
        {
            string answer1 = "233168";
            string answer2 = "4613732";
            string answer3 = "6857";
            string answer4 = "906609";
            string answer5 = "232792560";
            string answer6 = "25164150";
            string answer7 = "104743";
            string answer8 = "23514624000";
            string answer9 = "31875000";
            string answer10 = "142913828922";
            string answer11 = "70600674";
            string answer12 = "76576500";
            string answer13 = "5537376230";
            string answer14 = "837799";
            string answer16 = "1366";
            string answer17 = "21124";
            string answer18 = "1074";
            string answer19 = "171";
            string answer20 = "648";
            string answer21 = "31626";
            string answer22 = "871198282";
            string answer23 = "4179871";
            string answer24 = "2783915460";
            string answer25 = "4782";
            string answer26 = "983";
            string answer27 = "-59231";
            string answer28 = "669171001";
            string answer29 = "9183";
            string answer30 = "443839";
            string answer31 = "73682";

            if (list_problem.SelectedItem != null)
            {
                string selectedProblem = list_problem.SelectedItem.ToString();
                string answer = null;

                switch (selectedProblem)
                {
                    case "Problem 1": 
                        answer = answer1; 
                        break;
                    case "Problem 2": 
                        answer = answer2; 
                        break;
                    case "Problem 3": 
                        answer = answer3; 
                        break;
                    case "Problem 4": 
                        answer = answer4;
                        break;
                    case "Problem 5": 
                        answer = answer5; 
                        break;
                    case "Problem 6": 
                        answer = answer6; 
                        break;
                    case "Problem 7": 
                        answer = answer7; 
                        break;
                    case "Problem 8": 
                        answer = answer8; 
                        break;
                    case "Problem 9": 
                        answer = answer9; 
                        break;
                    case "Problem 10": 
                        answer = answer10; 
                        break;
                    case "Problem 11": 
                        answer = answer11;
                        break;
                    case "Problem 12": 
                        answer = answer12; 
                        break;
                    case "Problem 13": 
                        answer = answer13; 
                        break;
                    case "Problem 14": 
                        answer = answer14; 
                        break;
                    case "Problem 16": 
                        answer = answer16; 
                        break;
                    case "Problem 17": 
                        answer = answer17; 
                        break;
                    case "Problem 18": 
                        answer = answer18; 
                        break;
                    case "Problem 19": 
                        answer = answer19; 
                        break;
                    case "Problem 20":
                        answer = answer20; 
                        break;
                    case "Problem 21":
                        answer = answer21; 
                        break;
                    case "Problem 22": 
                        answer = answer22; 
                        break;
                    case "Problem 23": 
                        answer = answer23; 
                        break;
                    case "Problem 24": 
                        answer = answer24; 
                        break;
                    case "Problem 25": 
                        answer = answer25; 
                        break;
                    case "Problem 26": 
                        answer = answer26; 
                        break;
                    case "Problem 27": 
                        answer = answer27; 
                        break;
                    case "Problem 28": 
                        answer = answer28; 
                        break;
                    case "Problem 29": 
                        answer = answer29; 
                        break;
                    case "Problem 30": 
                        answer = answer30; 
                        break;
                    case "Problem 31": 
                        answer = answer31; 
                        break;
                }
                if (answer != null && txt_solution.Text == answer)
                {
                    txt_status.Text = "Correct problem";
                    txt_status.ForeColor = Color.Lime;
                    txt_solution.Text = string.Empty;
                }
                else
                {
                    txt_status.Text = "incorrect problem";
                    txt_status.ForeColor = Color.Red;
                    txt_solution.Text = string.Empty;
                }
            }
        }
        private void btn_clear_Click(object sender, EventArgs e)
        {
            txt_problem.Text = string.Empty;
            txt_solution.Text = string.Empty;
            txt_status.Text = string.Empty;
        }


    }
}
